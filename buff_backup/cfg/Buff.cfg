#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "buff"


gen = ParameterGenerator()
identity_color_enum = gen.enum([gen.const("RED", int_t, 0, "Filter red and white"),
                                gen.const("BLUE", int_t, 1, "Filter blue and white"),], "Define identity_color")
gen.add("identity_color", int_t, 0, "Define identity_color", 0, 0, 1,
        edit_method=identity_color_enum)
gen.add("light_threshold", int_t, 0,
        "Light channel threshold value", 130, 0, 255)
gen.add("color_threshold", int_t, 0,
        "BGR channels threshold value", 100, 0, 255)
gen.add("close_kernel_size", int_t, 0,
        "morphologyEx close kernel size", 5, 0, 30)
gen.add("logo_min_size", int_t, 0,
        "Minimal Rlogo size", 5, 0, 50)
gen.add("logo_max_size", int_t, 0,
        "Maximum Rlogo size", 50, 0, 100)
gen.add("logo_min_fill_ratio", double_t, 0,
        "Minimal Rlogo contour fill rate", 0.6, 0, 1)
gen.add("logo_square_tolerance", double_t, 0,
        "Rlogo should like a square", 0.15, 0, 1)
gen.add("logo_min_area_ratio", double_t, 0,
        "The area ratio of the smallest circumscribed triangle to the smallest circumscribed rectangle", 1.45, 0, 2)
gen.add("logo_shift_x", double_t, 0,
        "Shift the center by ratio", 0.08, 0, 1)
gen.add("logo_shift_y", double_t, 0,
        "Shift the center by ratio", 0.33, 0, 1)
gen.add("buff_min_length", int_t, 0,
        "Minimal Buff long side length", 100, 0, 1000)
gen.add("buff_aspect_tolerance", double_t, 0,
        "Buff rect should like a 1:2 long rectangle", 0.1, 0, 1)
gen.add("buff_fill_tolerance", double_t, 0,
        "Buff fill rate should be close to 0.5", 0.2, 0, 1)
gen.add("buff_shape_tolerance", double_t, 0,
        "The area of the smallest circumscribing triangle should be approximately the same as the area of the smallest circumscribing rectangle", 0.2, 0, 1)
gen.add("buff_symmetry_tolerance", double_t, 0,
        "Determine the smallest circumscribed triangle close to an isosceles triangle", 0.3, 0, 1)
gen.add("buff_arrow_like_tolerance", double_t, 0,
        "Determine whether it has arrow direction", 0.17, 0, 1)
gen.add("buff_circle_accuracy", double_t, 0,
        "HoughCirclesAlt accuracy", 0.85, 0, 0.99)
gen.add("kf_Q", double_t, 0,
        "KalmanFilter Process Noise Covariance", 0.001, 0, 0.01)
gen.add("kf_R", double_t, 0,
        "KalmanFilter Observation Noise Covariance", 0.3, 0, 1)
gen.add("fit_degree", int_t, 0,
        "The degree of polynomial fitting method", 3, 1, 10)
gen.add("fit_offset", double_t, 0,
        "The result of offsetting after polynomial fitting", 0.15, 0, 0.5)
gen.add("latency", double_t, 0,
        "The result of offset+latency after polynomial fitting", 0.3, 0, 1)

exit(gen.generate(PACKAGE, "buff_node", "Buff"))
